[gd_resource type="ShaderMaterial" load_steps=19 format=2]

[ext_resource path="res://Assets/noise.tres" type="Texture" id=1]

[sub_resource type="VisualShaderNodeScalarFunc" id=8]
function = 1

[sub_resource type="VisualShaderNodeScalarFunc" id=9]
function = 12

[sub_resource type="VisualShaderNodeScalarOp" id=10]
operator = 9

[sub_resource type="VisualShaderNodeScalarOp" id=12]
default_input_values = [ 0, 0.0, 1, 0.04 ]
operator = 1

[sub_resource type="VisualShaderNodeScalarOp" id=13]
operator = 1

[sub_resource type="VisualShaderNodeColorConstant" id=14]
constant = Color( 0.270807, 0.0522538, 0.0522538, 1 )

[sub_resource type="VisualShaderNodeVectorOp" id=15]
output_port_for_preview = 0
operator = 2

[sub_resource type="VisualShaderNodeColorOp" id=16]

[sub_resource type="VisualShaderNodeTexture" id=2]
source = 2

[sub_resource type="VisualShaderNodeGlobalExpression" id=18]
size = Vector2( 250, 150 )
expression = "uniform float time = 0.0;
"

[sub_resource type="VisualShaderNodeExpression" id=19]
size = Vector2( 250, 150 )
expression = "output0 = time;"

[sub_resource type="VisualShaderNodeInput" id=3]
input_name = "uv"

[sub_resource type="VisualShaderNodeTexture" id=4]
texture = ExtResource( 1 )

[sub_resource type="VisualShaderNodeInput" id=5]
input_name = "uv"

[sub_resource type="VisualShaderNodeScalarOp" id=6]
operator = 2

[sub_resource type="VisualShaderNodeScalarOp" id=7]
default_input_values = [ 0, 0.0, 1, 0.5 ]
operator = 9

[sub_resource type="VisualShader" id=1]
code = "shader_type canvas_item;
uniform sampler2D tex_frg_4;


// GlobalExpression:0
	uniform float time = 0.0;
	

void vertex() {
// Output:0

}

void fragment() {
// Input:3
	vec3 n_out3p0 = vec3(UV, 0.0);

// Texture:2
	vec3 n_out2p0;
	float n_out2p1;
	{
		vec4 _tex_read = texture(TEXTURE, n_out3p0.xy);
		n_out2p0 = _tex_read.rgb;
		n_out2p1 = _tex_read.a;
	}

// Input:5
	vec3 n_out5p0 = vec3(UV, 0.0);

// Texture:4
	vec4 tex_frg_4_read = texture(tex_frg_4, n_out5p0.xy);
	vec3 n_out4p0 = tex_frg_4_read.rgb;
	float n_out4p1 = tex_frg_4_read.a;

// Expression:26
	float n_out26p0;
	n_out26p0 = 0.0;
	{
		n_out26p0 = time;
	}

// ScalarFunc:10
	float n_out10p0 = cos(n_out26p0);

// ScalarFunc:11
	float n_out11p0 = abs(n_out10p0);

// ScalarOp:7
	float n_out7p0 = step(dot(n_out4p0, vec3(0.333333, 0.333333, 0.333333)), n_out11p0);

// ScalarOp:14
	float n_in14p1 = 0.04000;
	float n_out14p0 = n_out11p0 - n_in14p1;

// ScalarOp:12
	float n_out12p0 = step(dot(n_out4p0, vec3(0.333333, 0.333333, 0.333333)), n_out14p0);

// ScalarOp:15
	float n_out15p0 = n_out7p0 - n_out12p0;

// Color:17
	vec3 n_out17p0 = vec3(0.270807, 0.052254, 0.052254);
	float n_out17p1 = 1.000000;

// VectorOp:18
	vec3 n_out18p0 = vec3(n_out15p0) * n_out17p0;

// ColorOp:19
	vec3 n_out19p0 = vec3(1.0) - (vec3(1.0) - n_out2p0) * (vec3(1.0) - n_out18p0);

// ScalarOp:6
	float n_out6p0 = n_out2p1 * n_out7p0;

// Output:0
	COLOR.rgb = n_out19p0;
	COLOR.a = n_out6p0;

}

void light() {
// Output:0

}
"
graph_offset = Vector2( -265.879, 442.923 )
mode = 1
flags/light_only = false
nodes/fragment/0/position = Vector2( 1040, 80 )
nodes/fragment/2/node = SubResource( 2 )
nodes/fragment/2/position = Vector2( 260, 80 )
nodes/fragment/3/node = SubResource( 3 )
nodes/fragment/3/position = Vector2( 0, 120 )
nodes/fragment/4/node = SubResource( 4 )
nodes/fragment/4/position = Vector2( 260, 340 )
nodes/fragment/5/node = SubResource( 5 )
nodes/fragment/5/position = Vector2( 9.88783, 351.96 )
nodes/fragment/6/node = SubResource( 6 )
nodes/fragment/6/position = Vector2( 600, 140 )
nodes/fragment/7/node = SubResource( 7 )
nodes/fragment/7/position = Vector2( 560, 380 )
nodes/fragment/10/node = SubResource( 8 )
nodes/fragment/10/position = Vector2( 260, 620 )
nodes/fragment/11/node = SubResource( 9 )
nodes/fragment/11/position = Vector2( 460, 620 )
nodes/fragment/12/node = SubResource( 10 )
nodes/fragment/12/position = Vector2( 900, 520 )
nodes/fragment/14/node = SubResource( 12 )
nodes/fragment/14/position = Vector2( 700, 600 )
nodes/fragment/15/node = SubResource( 13 )
nodes/fragment/15/position = Vector2( 1060, 280 )
nodes/fragment/17/node = SubResource( 14 )
nodes/fragment/17/position = Vector2( 1080, 520 )
nodes/fragment/18/node = SubResource( 15 )
nodes/fragment/18/position = Vector2( 1340, 320 )
nodes/fragment/19/node = SubResource( 16 )
nodes/fragment/19/position = Vector2( 860, 100 )
nodes/fragment/25/node = SubResource( 18 )
nodes/fragment/25/position = Vector2( -260, 780 )
nodes/fragment/25/size = Vector2( 250, 150 )
nodes/fragment/25/input_ports = ""
nodes/fragment/25/output_ports = ""
nodes/fragment/25/expression = "uniform float time = 0.0;
"
nodes/fragment/26/node = SubResource( 19 )
nodes/fragment/26/position = Vector2( -300, 600 )
nodes/fragment/26/size = Vector2( 250, 150 )
nodes/fragment/26/input_ports = ""
nodes/fragment/26/output_ports = "0,0,output0;"
nodes/fragment/26/expression = "output0 = time;"
nodes/fragment/connections = PoolIntArray( 3, 0, 2, 0, 5, 0, 4, 0, 6, 0, 0, 1, 4, 0, 7, 0, 10, 0, 11, 0, 11, 0, 7, 1, 14, 0, 12, 1, 12, 0, 15, 1, 7, 0, 15, 0, 4, 0, 12, 0, 11, 0, 14, 0, 2, 1, 6, 0, 7, 0, 6, 1, 15, 0, 18, 0, 17, 0, 18, 1, 2, 0, 19, 0, 18, 0, 19, 1, 19, 0, 0, 0, 26, 0, 10, 0 )

[resource]
shader = SubResource( 1 )
shader_param/time = 0.0
